openapi: 3.0.0

info:
  title: Blog Api
  description: A blog Api made using NodeJS, MongoDB, Express
  version: 1.0.0
  contact : 
    email : keyur4tech123@gmail.com

servers:
  - url: http://localhost:4000/api/v1
    description: LocalHost Server

paths:
  /signup:
    post:
      tags:
        - User
      summary: creates a user
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - introduction
                - photo
              properties:
                name: 
                  type: string
                email:
                  type: string
                password:
                  type: string
                introduction:
                  type: string
                photo:
                  type: file
                  in: formData
      responses:
        '200':
          description: success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  name: 
                    type: string
                  email:
                    type: string
                  photo:
                    type: object
                    properties:
                      id:
                        type: string
                      secure_url:
                        type: string
                  introduction:
                    type: string
                  followers:
                    type: integer
                  articles:
                    type: array
                    items: 
                      type: string
                  _id: 
                    type: string
                  
        '400':
          description: some parameter is missing
        '401':
          description: user is already regisetred

  /login:
    post:
      tags:
        - User
      summary: user login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  name: 
                    type: string
                  email:
                    type: string
                  photo:
                    type: object
                    properties:
                      id:
                        type: string
                      secure_url:
                        type: string
                  introduction:
                    type: string
                  followers:
                    type: integer
                  articles:
                    type: array
                    items: 
                      type: string
                  _id: 
                    type: string
                  
        '400':
          description: some parameter is missing
        '401':
          description: user is not regisetred or password did not match

  /logout:
    get:
      tags:
        - User
      summary: user logout
      responses:
        '200':
          description: success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
  
  /forgotpassword:
    post:
      tags:
        - User
      summary: forgot password route
      description: paste the token in the password/reset route
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  url:
                    type: string
                  
        '400':
          description: email parameter is missing
        '401':
          description: user is not regisetred

  /password/reset/{token}:
    post:
      tags:
        - User
      summary: resets the user password
      parameters:
        - name: token
          in: path
          required: true
          description: Parameter token returned by forgotpassword route.
          schema:
            type : string
            
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - confirmPassword
              properties:
                password:
                  type: string
                confirmPassword:
                  type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  name: 
                    type: string
                  email:
                    type: string
                  photo:
                    type: object
                    properties:
                      id:
                        type: string
                      secure_url:
                        type: string
                  introduction:
                    type: string
                  followers:
                    type: integer
                  articles:
                    type: array
                    items: 
                      type: string
                  _id: 
                    type: string
                  
        '400':
          description: some parameter is missing
        '401':
          description: token is invalid or expired

  
  /blog/new:
    post:
      tags:
        - Blog
      summary: creates a new blog
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - content
                - keywords
              properties:
                title:
                  type: string
                description:
                  type: string
                content:
                  type: string
                keywords:
                  type: array
                  items: 
                    type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  title:
                    type: string
                  description:
                    type: string
                  content:
                    type: string
                  keywords:
                    type: array
                    items: 
                      type: string
                  author:
                    type: string
                  name:
                    type: string
                  
        '400':
          description: some parameter is missing

  /blog/myblogs:
    get:
      tags:
        - Blog
      summary: return all blogs written by logged in user
      responses:
        '200':
          description: success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  title:
                    type: string
                  description:
                    type: string
                  content:
                    type: string
                  keywords:
                    type: array
                    items: 
                      type: string
                  author:
                    type: string
                  name:
                    type: string
                  comments:
                    type: array
                    items:
                      type: string
                  numberOfLikes:
                    type: integer
                  
        '400':
          description: Blogs not found
       
  /blog/delete/{blogId}:
    get:
      tags:
        - Blog
      summary: delete a blog
      parameters:
        - name: blogId
          in: path
          required: true
          description: blog id
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  
        '400':
          description: blog parameter is missing

  /blog/searchbytitle:
    get:
      tags:
        - Blog
      summary: search blogs by title
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: search using title of the blog
      responses:
        '200':
          description: success
          content:
            application/json:
              schema: 
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    content:
                      type: string
                    keywords:
                      type: array
                      items: 
                        type: string
                    author:
                      type: string
                    name:
                      type: string
                    comments:
                      type: array
                      items:
                        type: string
                    numberOfLikes:
                      type: integer
                  
        '400':
          description: Blogs not found

  /blog/searchbykeywords:
    get:
      tags:
        - Blog
      summary: search blogs by keywords
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: search by keywords (separate by comma ',')
      responses:
        '200':
          description: success
          content:
            application/json:
              schema: 
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    content:
                      type: string
                    keywords:
                      type: array
                      items: 
                        type: string
                    author:
                      type: string
                    name:
                      type: string
                    comments:
                      type: array
                      items:
                        type: string
                    numberOfLikes:
                      type: integer
                  
        '400':
          description: Blogs not found

  /blog/update/{id}:
    post:
      tags:
        - Blog
      summary:  updates existing blog
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - content
                - keywords
              properties:
                title:
                  type: string
                description:
                  type: string
                content:
                  type: string
                keywords:
                  type: array
                  items: 
                    type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  title:
                    type: string
                  description:
                    type: string
                  content:
                    type: string
                  keywords:
                    type: array
                    items: 
                      type: string
                  author:
                    type: string
                  name:
                    type: string
                  
        '400':
          description: some parameter is missing

  /blog/searchbyuserid:
    get:
      tags:
        - Blog
      summary: search blogs by user id
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: search by user id
          required: true
      responses:
        '200':
          description: success
          content:
            application/json:
              schema: 
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    content:
                      type: string
                    keywords:
                      type: array
                      items: 
                        type: string
                    author:
                      type: string
                    name:
                      type: string
                    comments:
                      type: array
                      items:
                        type: string
                    numberOfLikes:
                      type: integer
                  
        '400':
          description: some parameter is missing
        '401':
          description: Blogs not found

  /blog/like/{id}:
    get:
      tags:
        - Blog
      summary:  Like or unlike a blog
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      
      responses:
        '200':
          description: success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  
                  
        '400':
          description: some parameter is missing

  /blog/comment/{id}:
    post:
      tags:
        - Blog
      summary:  post comment in blog
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  
        '400':
          description: some parameter is missing
